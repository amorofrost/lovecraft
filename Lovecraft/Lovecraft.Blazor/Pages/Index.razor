@page "/"
@inject IHttpClientFactory HttpClientFactory
@inject Lovecraft.Common.Interfaces.ILovecraftApiClient ApiClient
@inject NavigationManager Navigation
@inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedLocalStorage ProtectedLocalStorage

<h1>Welcome to Lovecraft</h1>

<p>This is a minimal Blazor Server shell. Use `Lovecraft.Common` from here.</p>

<div>
	<h3>WebAPI health</h3>
	@if (loading)
	{
		<p>Loading...</p>
	}
	else if (error != null)
	{
		<p style="color:red">Error: @error</p>
	}
	else
	{
		<p>Status: @healthResponse</p>
	}
	<button @onclick="CallHealth">Refresh</button>
</div>

<hr />

<div>
	<h3>Sign in</h3>
	@if (loginError != null)
	{
		<p style="color:red">@loginError</p>
	}
	<div>
		<label>Username: <input @bind="loginModel.Username" /></label>
	</div>
	<div>
		<label>Password: <input type="password" @bind="loginModel.Password" /></label>
	</div>
	<div>
		<button @onclick="OnLogin">Sign in</button>
		<a href="/register" style="margin-left:1rem">Create new account</a>
	</div>
</div>

@code {
	private bool loading = false;
	private string? healthResponse;
	private string? error;

	protected override async Task OnInitializedAsync()
	{
		await CallHealth();
	}

	private async Task CallHealth()
	{
		loading = true;
		error = null;
		try
		{
			var client = HttpClientFactory.CreateClient("webapi");
			var resp = await client.GetAsync("health");
			resp.EnsureSuccessStatusCode();
			healthResponse = await resp.Content.ReadAsStringAsync();
		}
		catch (Exception ex)
		{
			error = ex.Message;
			healthResponse = null;
		}
		finally
		{
			loading = false;
			StateHasChanged();
		}
	}
}

@code {
	private class LoginModel { public string Username { get; set; } = string.Empty; public string Password { get; set; } = string.Empty; }
	private LoginModel loginModel = new();
	private string? loginError;

	private async Task OnLogin()
	{
		loginError = null;
		try
		{
			var user = await ApiClient.AuthenticateAsync(loginModel.Username, loginModel.Password);
			if (user == null)
			{
				loginError = "Invalid username or password";
				return;
			}

			// persist user id in protected local storage
			await ProtectedLocalStorage.SetAsync("lovecraft_user_id", user.Id.ToString());

			// navigate to profile page
			Navigation.NavigateTo($"/profile/{user.Id}");
		}
		catch (Exception ex)
		{
			loginError = ex.Message;
		}
	}
}
